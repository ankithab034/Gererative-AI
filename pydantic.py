# -*- coding: utf-8 -*-
"""Genai4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b4YSp6mjJUd9BQQU8ynTYDljXlGWlIw6
"""

!pip install pydantic

from pydantic import BaseModel, validator, ValidationError
from datetime import datetime
from typing import Optional,List

class DataRecord(BaseModel):
    id: int
    name: str
    amount: float
    transaction_date: datetime
    status: Optional[str] = None  # Optional field

    @validator('name')
    def name_must_not_be_empty(cls, v):
        if not v.strip():
            raise ValueError("Name cannot be empty")
        return v

    @validator('status')
    def status_must_be_valid(cls, v):
        allowed = {'pending', 'completed', 'failed'}
        if v is not None and v.lower() not in allowed:
            raise ValueError(f"Status must be one of {allowed}")
        return v

# Sample data, with a few intentionally invalid entries
raw_data: List[dict] = [
    {"id": "1", "name": "Alice",   "amount": "123.45", "transaction_date": "2024-05-01", "status": "completed"},
    {"id": "2", "name": "   ",     "amount": "50.0",   "transaction_date": "2024-05-02", "status": "pending"},
    {"id": "3", "name": "Bob",     "amount": "invalid", "transaction_date": "2024-05-03", "status": "completed"},
    {"id": "4", "name": "Charlie", "amount": "75.00",  "transaction_date": "not-a-date",   "status": "error"},
    {"id": "5", "name": "Dana",    "amount": "100",    "transaction_date": "2024-05-05"}  # status is optional
]

#Creates with dataobject for storing valid ones and rejecting with errors
valid_records = []
errors = []

for record in raw_data:
    try:
        validated = DataRecord(**record)
        valid_records.append(validated.dict())
    except ValidationError as e:
        errors.append({"record": record, "errors": e.errors()})

#Tables cretaed for both valid records and validation errors
from IPython.display import display
import pandas as pd

df_valid = pd.DataFrame(valid_records)
df_errors = pd.DataFrame(errors)


print("✅ Valid Records")
display(df_valid)

print("\n❌ Validation Errors")
display(df_errors)